{"mappings":"I,E,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCiBA,SAAS,EAAe,CAAa,EACnC,IAAI,EAAc,GAEb,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAY,CAAA,CAAA,OAAA,QAAA,CAAA,GAAZ,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAA2B,CAA3B,IAAM,EAAN,EAAA,KAAA,CACC,IAAO,EAAG,WAAW,IACvB,CAAA,GAAe,GADjB,EAIA,GAAe,CACjB,C,C,M,E,CANK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAQL,OAAO,EAAY,iBAAiB,EACtC,CAzBA,A,C,A,C,S,C,E,G,M,O,C,G,O,E,E,C,E,EAFmB,SAAS,gBAAgB,CAAC,Y,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,EAEtC,OAAO,CAAC,SAAC,CAAhB,EACE,IAAM,EAAQ,EAAM,aAAa,CAAC,SAC5B,EAAQ,SAAS,aAAa,CAAC,SAErC,EAAM,SAAS,CAAC,GAAG,CAAC,eACpB,EAAM,YAAY,CAAC,MAAQ,GAAW,MAAA,CAAT,EAAM,EAAE,GACrC,EAAM,WAAW,CAAG,EAAe,EAAM,YAAY,CAAC,SAEtD,EAAM,YAAY,CAAC,cAAe,EAAe,EAAM,IAAI,GAE3D,EAAM,YAAY,CAAC,EAAO,EAC5B","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar fields = _to_consumable_array(document.querySelectorAll(\".field\"));\nfields.forEach(function(field) {\n    var input = field.querySelector(\"input\");\n    var label = document.createElement(\"label\");\n    label.classList.add(\"field-label\");\n    label.setAttribute(\"for\", \"\".concat(input.id));\n    label.textContent = getCorrectName(input.getAttribute(\"name\"));\n    input.setAttribute(\"placeholder\", getCorrectName(input.name));\n    field.insertBefore(label, input);\n});\nfunction getCorrectName(unCorrectName) {\n    var correctName = \"\";\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = unCorrectName[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var ch = _step.value;\n            if (ch === ch.toUpperCase()) correctName += \" \";\n            correctName += ch;\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    return correctName.toLocaleLowerCase();\n}\n\n//# sourceMappingURL=index.1f72788f.js.map\n","'use strict';\n\nconst fields = [...document.querySelectorAll('.field')];\n\nfields.forEach((field) => {\n  const input = field.querySelector('input');\n  const label = document.createElement('label');\n\n  label.classList.add('field-label');\n  label.setAttribute('for', `${input.id}`);\n  label.textContent = getCorrectName(input.getAttribute('name'));\n\n  input.setAttribute('placeholder', getCorrectName(input.name));\n\n  field.insertBefore(label, input);\n});\n\nfunction getCorrectName(unCorrectName) {\n  let correctName = '';\n\n  for (const ch of unCorrectName) {\n    if (ch === ch.toUpperCase()) {\n      correctName += ' ';\n    }\n\n    correctName += ch;\n  }\n\n  return correctName.toLocaleLowerCase();\n}\n"],"names":["arr","_array_like_to_array","len","length","i","arr2","Array","getCorrectName","unCorrectName","correctName","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","ch","value","toUpperCase","err","return","toLocaleLowerCase","fields","_array_without_holes","isArray","document","querySelectorAll","_iterable_to_array","iter","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","forEach","field","input","querySelector","label","createElement","classList","add","setAttribute","concat","id","textContent","getAttribute","insertBefore"],"version":3,"file":"index.1f72788f.js.map"}